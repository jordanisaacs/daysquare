{
  #description = "DaySquare rust dev environment";
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    mongofix.url = "github:jordanisaacs/nixpkgs/mongodb-portfix";
    utils.url = "github:numtide/flake-utils";
    naersk.url = "github:nix-community/naersk";
    rust-overlay.url = "github:oxalica/rust-overlay";
    sops-nix.url = "github:Mic92/sops-nix";
  };

  outputs = { self, nixpkgs, utils, naersk, rust-overlay, sops-nix, mongofix, ... }:
    let
      server_db_user = "daysquare";
      server_db_password = "daysquare";
      server_db_port = 5432;
      server_db_name = "daysquare";
      server_db_container_name = "serverDB";
      server_port = 8000;

      redact_db_root_password = "daysquare";
      redact_db_user = "daysquare";
      redact_db_password = "daysquare";
      redact_db_port = 4242;
      redact_db_name = "daysquare";
      redact_db_container_name = "redactDB";

      system = "x86_64-linux";
      naersk-lib = naersk.lib."${system}";
      overlays = [ (import rust-overlay) (sops-nix.overlay) ];
      pkgs = import nixpkgs {
        inherit system overlays;
      };

      sqlsConfigFile = ''
        # Autogenerated: DO NOT EDIT
        # sqls configuration file

        lowercaseKeywords: false
        connections:
          - alias: dsn_daysquare
            driver: postgresql
            proto: tcp
            user: ${server_db_user}
            passwd: ${server_db_password}
            dbName: ${server_db_name}
            host: ${server_db_container_name}
            port: ${builtins.toString server_db_port}
      '';
      backendConfigFile = ''
        # Autogenerated: DO NOT EDIT
        # daysquare backend configuration file.

        database:
            host: ${server_db_container_name}
            port: ${builtins.toString server_db_port}
            username: ${server_db_user}
            password: ${server_db_password}
            database_name: ${server_db_name}
        server:
            host: 127.0.0.1
            application_port: ${toString server_port}
            secure: false
          
      '';

    in
    rec {
      devShell."${system}" = pkgs.mkShell {
        nativeBuildInputs = with pkgs; [
          # build inputs
          pkg-config
          openssl

          # encrypted config
          sops

          # rust
          (rust-bin.stable.latest.default.override {
            targets = [ "wasm32-unknown-unknown" "x86_64-unknown-linux-gnu" ];
          })
          cargo
          # cargo tools
          cargo-edit
          cargo-audit

          # database
          sqlx-cli
          postgresql

          # tracing format
          bunyan-rs

          # frontend build
          trunk
        ];

        shellHook = ''
          rm ./backend/config.yml
          rm ./backend/configuration.yaml
          echo ${"'" + sqlsConfigFile + "'"} > ./backend/config.yml
          echo ${"'" + backendConfigFile + "'"} > ./backend/configuration.yaml
          sudo nixos-container destroy ${server_db_container_name}
          sudo nixos-container create ${server_db_container_name} --flake ".#${server_db_container_name}"
          sudo nixos-container start ${server_db_container_name}
          sqlx database create
          sqlx migrate --source ./backend/migrations run
        '';

        DATABASE_URL = "postgres://${server_db_user}:${server_db_password}@${server_db_container_name}:${builtins.toString server_db_port}/${server_db_name}";
        REDACT_DB_URL = "mongodb://${redact_db_user}:${redact_db_password}@${redact_db_container_name}:${builtins.toString redact_db_port}";
        REDACT_DB_NAME = "${redact_db_name}";
        PGHOST = server_db_container_name;
        PGUSER = server_db_user;
        PGPORT = server_db_port;
        PGDATABASE = server_db_name;
      };
    } // {
      nixosConfigurations = {
        "${server_db_container_name}" = nixpkgs.lib.nixosSystem {
          inherit system;

          modules = [
            ({ pkgs, ... }: {
              boot.isContainer = true;

              system.configurationRevision = nixpkgs.lib.mkIf (self ? rev) self.rev;

              networking.useDHCP = false;
              networking.firewall.allowedTCPPorts = [ server_db_port ];

              services.postgresql = {
                enable = true;
                enableTCPIP = true;
                port = server_db_port;
                authentication = pkgs.lib.mkForce ''
                  # Generate file, do not edit!
                  # TYPE    DATABASE    USER    ADDRESS         METHOD
                  local     all         all                     trust
                  host      all         all     10.0.0.1/8      md5
                  host      all         all     ::1/128         md5
                '';
                initialScript = pkgs.writeText "backend-initScript" ''
                  CREATE USER ${server_db_user} WITH LOGIN ENCRYPTED PASSWORD ${"'" + server_db_password + "'"} CREATEDB;
                  CREATE DATABASE ${server_db_name};
                  GRANT ALL PRIVILEGES ON DATABASE ${server_db_name} TO ${server_db_user};
                '';
              };
            })
          ];
        };

        "testMongo" = mongofix.lib.nixosSystem
          {
            inherit system;

            modules = [
              ({ pkgs, ... }: {
                boot.isContainer = true;

                system.configurationRevision = nixpkgs.lib.mkIf (self ? rev) self.rev;

                networking.useDHCP = false;
                networking.firewall.allowedTCPPorts = [ redact_db_port ];

                services.mongodb = {
                  enable = true;
                  enableAuth = true;
                  port = redact_db_port;
                  initialRootPassword = "mongodb";
                  initialScript = pkgs.writeText "mongoInitScript" ''
                    use ${redact_db_name}
                    db.createuser(
                      {
                        user: "${redact_db_user}"
                        pwd: "${redact_db_password}"
                        roles: [
                          { role: dbOwner, db: "${redact_db_name}" },
                        ]
                      }
                    )
                  '';
                };
              })
            ];
          };

        "${redact_db_container_name}" = nixpkgs.lib.nixosSystem
          {
            inherit system;

            modules = [
              ({ pkgs, ... }: {
                boot.isContainer = true;

                system.configurationRevision = nixpkgs.lib.mkIf (self ? rev) self.rev;

                networking.useDHCP = false;
                networking.firewall.allowedTCPPorts = [ redact_db_port ];

                users.users.mongodb = {
                  name = "mongodb";
                  isSystemUser = true;
                  group = "mongodb";
                  description = "MongoDB server user";
                };
                users.groups.mongodb = { };

                environment.systemPackages = [ pkgs.mongodb ];

                # https://jira.mongodb.org/browse/SERVER-32773
                additionalCapabilities = [ "CAP_IPC_LOCK" ];

                systemd.services.mongodb =
                  let
                    mongodb = pkgs.mongodb;
                    baseCfg = ''
                      net.bindIp: 127.0.0.1
                      systemLog.destination: syslog
                      storage.dbPath: /data/db/mongodb
                      net.port: ${builtins.toString redact_db_port}
                    '';
                    cfg = builtins.concatStringsSep "\n" [ baseCfg "security.authorization: enabled" ];
                    writeCfg = txt: pkgs.writeText "mongodb.conf" txt;
                    pidFile = "/run/mongodb.pid";
                    initialScript = pkgs.writeScript "mongoDbInit" ''
                      use ${redact_db_name}
                      db.createuser(
                        {
                          user: "${redact_db_user}"
                          pwd: "${redact_db_password}"
                          roles: [
                            { role: dbOwner, db: "${redact_db_name}" },
                          ]
                        }
                      )
                    '';
                    initialRootPassword = "mongodb";
                  in
                  {
                    description = "MongoDB server";

                    wantedBy = [ "multi-user.target" ];
                    after = [ "network.target" ];

                    serviceConfig = {
                      ExecStart = "${mongodb}/bin/mongod --config ${writeCfg cfg} --fork --pidfilepath ${pidFile}";
                      User = "mongodb";
                      PIDFile = pidFile;
                      Type = "forking";
                      TimeoutStartSec = 120; # intial creating of journal can take some time
                      PermissionsStartOnly = true;
                    };

                    preStart = ''
                      rm /data/db/mongod.lock || true
                      if ! test -e /data/db/mongodb; then
                          install -d -m 0700 -o mongodb /data/db/mongodb
                          # See postStart!
                          touch /data/db/mongodb/.first_startup
                      fi
                      if ! test -e ${pidFile}; then
                          install -D -o mongodb /dev/null ${pidFile}
                      fi
                      if ! test -e "/data/db/mongodb/.auth_setup_complete"; then
                        systemd-run --unit=mongodb-for-setup --uid=mongodb ${mongodb}/bin/mongod --config ${writeCfg baseCfg}
                        # wait for mongodb
                        while ! ${mongodb}/bin/mongo --eval "db.version()" --port ${builtins.toString redact_db_port} > /dev/null 2>&1; do sleep 0.1; done
                        echo "mongodb running"
                      ${mongodb}/bin/mongo --port ${builtins.toString redact_db_port} <<EOF
                        use admin
                        db.createUser(
                          {
                            user: "root",
                            pwd: "${initialRootPassword}",
                            roles: [
                              { role: "userAdminAnyDatabase", db: "admin" },
                              { role: "dbAdminAnyDatabase", db: "admin" },
                              { role: "readWriteAnyDatabase", db: "admin" }
                            ]
                          }
                        )
                      EOF
                        touch /data/db/.auth_setup_complete
                        systemctl stop mongodb-for-setup
                      fi
                    '';

                    postStart = ''
                      while ! ${mongodb}/bin/mongo --eval "db.version()" > /dev/null 2>&1; do sleep 0.1; done
                      if test -e "/data/db/mongodb/.first_startup"; then
                        ${mongodb}/bin/mongo --port ${builtins.toString redact_db_port} -u root -p ${initialRootPassword} admin "${initialScript}"
                        rm -f "/data/db/mongodb/.first_startup"
                      fi
                    '';
                  };
              })
            ];
          };
      };
    };
}

